name: Deploy Skedy AI to Kamatera

on:
  push:
    branches: [ main ]  # Changed from master to main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: kamatera

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        printf '%s\n' "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        printf '%s\n' "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/deploy_key
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}

    - name: Deploy Skedy AI to Kamatera (Zero-Downtime)
      run: |
        IMAGE_TAG=$(date +%Y%m%d%H%M)
        echo "🔖 Using image tag: $IMAGE_TAG"

        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no root@45.151.154.42 << EOF
        set -e

        APP_DIR="/root/skedy-ai"
        CONTAINER_NAME="skedy-ai"
        IMAGE_NAME="skedy-ai"

        # Stop existing containers (both app and cron)
        echo "⏹️ Stopping existing containers..."
        docker-compose -f docker-compose.cron.yml down || true
        docker stop skedy-ai || true  # fallback for old single container
        docker rm skedy-ai || true

        # Remove old images to save space
        docker image prune -f || true

        # Pull latest code (exactly like working deployment)
        echo "📥 Pulling latest code..."
        if [ -d "/root/skedy-ai" ]; then
          cd /root/skedy-ai
          git pull origin main
        else
          git clone https://github.com/mesieou/skedy-ai.git /root/skedy-ai
          cd /root/skedy-ai
        fi

        # Build Docker image (exactly like working deployment)
        echo "🔨 Building Docker image..."
        docker build -t skedy-ai .

        echo "🚀 Starting services with docker-compose..."

        # Create .env file with secrets (exactly like working deployment)
        cat > .env << ENVEOF
        NODE_ENV=production
        NEXT_TELEMETRY_DISABLED=1
        NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY }}
        SUPABASE_SECRET_KEY=${{ secrets.SUPABASE_SECRET_KEY }}
        VOICE_REDIS_HOST=${{ secrets.VOICE_REDIS_HOST }}
        VOICE_REDIS_PORT=${{ secrets.VOICE_REDIS_PORT }}
        VOICE_REDIS_DB=${{ secrets.VOICE_REDIS_DB }}
        VOICE_REDIS_PASSWORD=${{ secrets.VOICE_REDIS_PASSWORD }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        OPENAI_WEBHOOK_SECRET=${{ secrets.OPENAI_WEBHOOK_SECRET }}
        TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}
        TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}
        TWILIO_PHONE_NUMBER=${{ secrets.TWILIO_PHONE_NUMBER }}
        GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}
        DEMO_REMOVALIST_BUSINESS_ID=${{ secrets.DEMO_REMOVALIST_BUSINESS_ID }}
        DEMO_MANICURIST_BUSINESS_ID=${{ secrets.DEMO_MANICURIST_BUSINESS_ID }}
        DEMO_PLUMBER_BUSINESS_ID=${{ secrets.DEMO_PLUMBER_BUSINESS_ID }}
        CRON_SECRET=${{ secrets.CRON_SECRET }}
        SENTRY_DSN=${{ secrets.SENTRY_DSN }}
        SENTRY_API_KEY=${{ secrets.SENTRY_API_KEY }}
        ENVEOF

        # Deploy with docker-compose (app + cron services)
        echo "🚀 Starting services with docker-compose..."
        docker-compose -f docker-compose.cron.yml up -d

        echo "✅ Deployment completed successfully!"

        # Verify both containers are running
        sleep 5
        if docker ps | grep -q skedy-app && docker ps | grep -q availability-cron; then
          echo "✅ Both services are running"
          echo "📱 Main app logs:"
          docker logs --tail 5 \$(docker-compose -f docker-compose.cron.yml ps -q skedy-app)
          echo "⏰ Cron service logs:"
          docker logs --tail 5 \$(docker-compose -f docker-compose.cron.yml ps -q availability-cron)
        else
          echo "❌ One or more services failed to start"
          docker-compose -f docker-compose.cron.yml logs
          exit 1
        fi
        EOF
