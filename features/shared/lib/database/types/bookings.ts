import { BaseEntity } from "./base";
import type { PriceBreakdown } from '../../../../scheduling/lib/types/booking-calculations';
import type { BookingAddress, CreateAddressData } from './addresses';
import type { Business } from './business';

// Booking enums
export enum BookingStatus {
  NOT_ACCEPTED = 'not_accepted',
  PENDING = 'pending',
  ACCEPTED = 'accepted',
  CONFIRMED = 'confirmed',
  IN_PROGRESS = 'in_progress',
  COMPLETED = 'completed',
  CANCELLED = 'cancelled',
  REFUNDED = 'refunded'
}

export interface Booking extends BaseEntity {
  user_id: string;
  business_id: string;
  status: BookingStatus;
  total_estimate_amount: number;
  total_estimate_time_in_minutes: number;
  start_at: string; // UTC ISO string
  end_at: string;   // UTC ISO string
  deposit_amount: number;
  remaining_balance: number;
  deposit_paid: boolean;
  price_breakdown: PriceBreakdown | null; // Null for manual bookings without calculations
}

export type CreateBookingData = Omit<Booking, 'id' | 'created_at' | 'updated_at'>;
export type UpdateBookingData = Partial<Omit<Booking, 'id' | 'created_at'>>;

/**
 * Core booking creation parameters (internal - shared between quote-based and manual bookings)
 */
export interface BookingCoreParams {
  user_id: string;
  business_id: string;
  start_at: string;
  end_at: string;
  bookingData: CreateBookingData;
  services: Array<{ service_id: string; quantity?: number }>;
  addresses?: Array<BookingAddress | CreateAddressData>; // Quote flow uses BookingAddress, manual uses CreateAddressData
  business: Business; // Required: for availability updates
}

/**
 * Manual booking creation parameters (dashboard use case)
 * Used when creating bookings without quote calculations
 * Note: remaining_balance is calculated server-side based on deposit_paid and deposit_amount
 */
export interface ManualBookingParams {
  user_id: string;
  business_id: string;
  start_at: string;
  end_at: string;
  status: BookingStatus;
  total_estimate_amount: number;
  total_estimate_time_in_minutes: number;
  deposit_amount: number;
  deposit_paid: boolean;
  services: Array<{ service_id: string; service_name: string }>;
  addresses?: CreateAddressData[]; // Flat structure for manual entry (IDs generated by DB)
  business: Business; // Required: for availability updates
}
